name: CI/CD with Docker & Auto Pull Request

on:
  push:
    branches:
      - test # Se ejecuta cuando se hace un push a la rama 'test'
  pull_request:
    branches:
      - master # Se ejecuta cuando se hace un PR hacia la ram

jobs:
  # Trabajo 1: Construir y subir la imagen Docker
  update_docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: dayanara1898/html-project:latest

  # Trabajo 2: Desplegar en instancia EC2 de prueba (test)
  deploy_to_test:
    name: Deploy to EC2 Test Instance
    runs-on: ubuntu-latest
    needs: update_docker_image
    if: github.ref == 'refs/heads/test' # Solo se ejecuta cuando hay un push a 'test'

    steps:
      - name: Set up SSH key for EC2 Test Instance
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to EC2 Test Instance
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_INSTANCE }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker stop html-container || true
            docker rm html-container || true
            docker pull dayanara1898/html-project:latest
            docker run -d --name html-container -p 80:80 dayanara1898/html-project:latest

  # Trabajo 3: Crear Pull Request a la rama master
  create_pull_request:
    name: Create Pull Request to master
    runs-on: ubuntu-latest
    needs: update_docker_image
    if: github.ref == 'refs/heads/test' # Solo se ejecuta cuando hay un push a la rama 'test'

    steps:
      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/install.sh | bash
          gh auth login --with-token < ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request from test to master
        run: |
          gh pr create --base master --head test --title "Auto PR from test to master" --body "Automatic PR from test to master after successful deployment to test."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Trabajo 4: Desplegar en instancias EC2 de producción
  deploy_to_production:
    name: Deploy to EC2 Production Instances
    runs-on: ubuntu-latest
    needs: update_docker_image
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'master' # Solo se ejecuta cuando el PR es hacia 'master'

    steps:
      - name: Set up SSH key for Production Instances
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Desplegar en la primera instancia EC2 de producción
      - name: Deploy to EC2 Production Instance 1
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_INSTANCE_1 }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker stop html-container || true
            docker rm html-container || true
            docker pull dayanara1898/html-project:latest
            docker run -d --name html-container -p 80:80 dayanara1898/html-project:latest

      # Desplegar en la segunda instancia EC2 de producción
      - name: Deploy to EC2 Production Instance 2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_INSTANCE_2 }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker stop html-container || true
            docker rm html-container || true
            docker pull dayanara1898/html-project:latest
            docker run -d --name html-container -p 80:80 dayanara1898/html-project:latest
